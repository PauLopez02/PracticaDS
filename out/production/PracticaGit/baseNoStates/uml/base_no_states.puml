@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryAreas {
- {static} allDoors : Door[]
- {static} allAreas : Area[]
+ {static} makeAreas()
+ {static} findDoorById(id : String) : Door
+ {static} findAreaById(id : String) : Area
+ {static} getAllDoors() : Door[]
}

DirectoryAreas --> "*" Door : "allDoors"

class DirectoryUserGroups {
- {static} users : User[]
- {static} userGroups : UserGroup[]
+ {static} makeUserGroups()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUserGroups --> "*" User : "users"

class Door {
- id : String
- doorState : DoorState
- from : Space
- to : Space
- {static} clock : Clock
+ Door(id : String, from : Space, to : Space)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
'+ getId() : String
'+ setState(ds : DoorState)
'+ getFrom()
'+ getTo()
'+ getClock()
- doAction(action : String)
}

Space o-- "*" Door : doors
Door *-- DoorState
Door o-- Space
Door ..> Clock

abstract class DoorState {
# door : Door
# name : String
# isClosed : boolean
+ DoorState(door : Door, isClosed : boolean)
+ getName() : String
+ isClosed() : boolean
+ {abstract} open()
+ {abstract} close()
+ {abstract} lock()
+ {abstract} unlock()
+ {abstract} unlockShortly()
}

class LockedClosed extends DoorState {
+ LockedClosed(door : Door)
+ open() override
+ close() override
+ lock() override
+ unlock() override
+ unlockShortly() override
}

class OpenPropped extends DoorState {
+ OpenPropped(door : Door)
+ open() override
+ close() override
+ lock() override
+ unlock() override
+ unlockShortly() override
}

class UnlockedClosed extends DoorState {
+ UnlockedClosed(door : Door)
+ open() override
+ close() override
+ lock() override
+ unlock() override
+ unlockShortly() override
}

class UnlockedOpen extends DoorState {
+ UnlockedOpen(door : Door)
+ open() override
+ close() override
+ lock() override
+ unlock() override
+ unlockShortly() override
}

class UnlockedShortly extends DoorState implements Observer {
- timeLeftOpen : int
- {static} DEFAULT_TIME_OPEN = 10
- tickCounter : int
+ UnlockedShortly(door : Door)
+ update(o : Observable, arg : Object) override
+ open() override
+ close() override
+ lock() override
+ unlock() override
+ unlockShortly() override
+ refreshTimer()
}

class User {
- name : String
- credential : String
- group : UserGroup
+ User(name: String, credential: String, group : UserGroup)
+ toString() : String
'+ getCredential : String
'+ getUserGroup : UserGroup
}

User o-- "1" UserGroup

class UserGroup {
- nameOfTheGroup : String
- permission : Permission
+ UserGroup(nameOfTheGroup : String, permission : Permission)
+ getPermission() : Permission
}

class Permission {
- areasConceded : Area[]
- schedules : Schedule
+ Permission(areasConceded : Area, schedules : Schedule)
+ checkPermission(area : Area, moment : LocalDateTime)
}

Area "*" o-- Permission : "areas"
Schedule "*" o-- Permission : schedules

class Schedule {
- timeStart : LocalTime
- timeEnd : LocalTime
- beginingValid : LocalDateTime
- endValid : LocalDateTime
- daysOfWeek : DayOfWeek[]
+ Schedule(timeStart : LocalTime, timeEnd : LocalTime, weekDay : DayOfWeek, beginingValid : LocalDateTime, endValid : LocalDateTime)
+ checkIfInSchedule(moment : LocalDateTime) : boolean
}

abstract class Area {
- id : String
# parentArea : Area
+ Area(id : String, pA : Area)
+ getId() : String
+ belongInside(a : Area) : boolean
}

DirectoryAreas --> "*" Area : "allAreas"

class Partition extends Area {
areas : Area[]
+ Partition(id : String, parentArea : Area)
}

class Space extends Area {
- doors : Door[]
+ Space(id : String, parentArea : Area)
}

class Main {
+ {static} main(args : String)
}

class Clock extends Observable {
- timer : Timer
+ Clock(c : Clock)
+ Clock()
+ startClock()
+ stopClock()
- tick()
}

note right of Main::main
DirectoryAreas.makeAreas()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryAreas
DirectoryAreas -[hidden]right- DirectoryUserGroups
@enduml
